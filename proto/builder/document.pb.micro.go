// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/builder/document.proto

package builder

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Document service

type DocumentService interface {
	// 合并文本
	Merge(ctx context.Context, in *DocumentMergeRequest, opts ...client.CallOption) (*DocumentMergeResponse, error)
	// 列举
	List(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*DocumentListResponse, error)
	// 删除
	Delete(ctx context.Context, in *DocumentDeleteRequest, opts ...client.CallOption) (*DocumentDeleteResponse, error)
	// 批量删除
	BatchDelete(ctx context.Context, in *DocumentBatchDeleteRequest, opts ...client.CallOption) (*DocumentBatchDeleteResponse, error)
}

type documentService struct {
	c    client.Client
	name string
}

func NewDocumentService(name string, c client.Client) DocumentService {
	return &documentService{
		c:    c,
		name: name,
	}
}

func (c *documentService) Merge(ctx context.Context, in *DocumentMergeRequest, opts ...client.CallOption) (*DocumentMergeResponse, error) {
	req := c.c.NewRequest(c.name, "Document.Merge", in)
	out := new(DocumentMergeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentService) List(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*DocumentListResponse, error) {
	req := c.c.NewRequest(c.name, "Document.List", in)
	out := new(DocumentListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentService) Delete(ctx context.Context, in *DocumentDeleteRequest, opts ...client.CallOption) (*DocumentDeleteResponse, error) {
	req := c.c.NewRequest(c.name, "Document.Delete", in)
	out := new(DocumentDeleteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentService) BatchDelete(ctx context.Context, in *DocumentBatchDeleteRequest, opts ...client.CallOption) (*DocumentBatchDeleteResponse, error) {
	req := c.c.NewRequest(c.name, "Document.BatchDelete", in)
	out := new(DocumentBatchDeleteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Document service

type DocumentHandler interface {
	// 合并文本
	Merge(context.Context, *DocumentMergeRequest, *DocumentMergeResponse) error
	// 列举
	List(context.Context, *ListRequest, *DocumentListResponse) error
	// 删除
	Delete(context.Context, *DocumentDeleteRequest, *DocumentDeleteResponse) error
	// 批量删除
	BatchDelete(context.Context, *DocumentBatchDeleteRequest, *DocumentBatchDeleteResponse) error
}

func RegisterDocumentHandler(s server.Server, hdlr DocumentHandler, opts ...server.HandlerOption) error {
	type document interface {
		Merge(ctx context.Context, in *DocumentMergeRequest, out *DocumentMergeResponse) error
		List(ctx context.Context, in *ListRequest, out *DocumentListResponse) error
		Delete(ctx context.Context, in *DocumentDeleteRequest, out *DocumentDeleteResponse) error
		BatchDelete(ctx context.Context, in *DocumentBatchDeleteRequest, out *DocumentBatchDeleteResponse) error
	}
	type Document struct {
		document
	}
	h := &documentHandler{hdlr}
	return s.Handle(s.NewHandler(&Document{h}, opts...))
}

type documentHandler struct {
	DocumentHandler
}

func (h *documentHandler) Merge(ctx context.Context, in *DocumentMergeRequest, out *DocumentMergeResponse) error {
	return h.DocumentHandler.Merge(ctx, in, out)
}

func (h *documentHandler) List(ctx context.Context, in *ListRequest, out *DocumentListResponse) error {
	return h.DocumentHandler.List(ctx, in, out)
}

func (h *documentHandler) Delete(ctx context.Context, in *DocumentDeleteRequest, out *DocumentDeleteResponse) error {
	return h.DocumentHandler.Delete(ctx, in, out)
}

func (h *documentHandler) BatchDelete(ctx context.Context, in *DocumentBatchDeleteRequest, out *DocumentBatchDeleteResponse) error {
	return h.DocumentHandler.BatchDelete(ctx, in, out)
}
